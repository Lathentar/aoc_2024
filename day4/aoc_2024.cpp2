ParsedData: type = {
   // data members
   public grid: std::vector<std::string> = ();

   // parse from the stream
   operator=: (out this, move inputStream: std::istream) = {
      line := std::string();
      while ( std::getline( inputStream, line ) ) {
         grid.push_back( line );
      }
   }

   get_element: (this, x: i32, y: i32) -> char = {
      if ( x < 0 || y < 0 || y >= grid.ssize() || x >= grid[ 0 ].ssize() ) {
         return 0;
      }
      return grid[y][x];
   }
}

solve_part1: (data: ParsedData) = {
   count := 0;

   (copy y := 0)
   while y < data.grid.ssize()
   next y++ {
      (copy x:= 0)
      while x < data.grid.ssize()
      next x++ {
         if data.get_element( x, y ) == 'X' {
            // Check all directions for 'MAS'
            dirs_x : std::array<i32, 8> = ( -1, -1, -1,  0,  0,  1,  1,  1 );
            dirs_y : std::array<i32, 8> = ( -1,  0,  1, -1,  1, -1,  0,  1 );
            for std::views::zip( dirs_x, dirs_y ) do (dir) {
               len := 1;
               while true {
                  pos_x := x + std::get<0>( dir ) * len;
                  pos_y := y + std::get<1>( dir ) * len;
                  ch := data.get_element( pos_x, pos_y );

                  if ( len == 1 && ch == 'M' ) || 
                     ( len == 2 && ch == 'A' ) {
                     len += 1;
                  }
                  else if ( len == 3 && ch == 'S' ) {
                     count++;
                     break;
                  }
                  else {
                     break;
                  }
               }
            }
         }
      }
   }

   std::cout << "Part One: " << count << std::endl;
}

solve_part2: (data: ParsedData) = {
   count := 0;

   (copy y := 0)
   while y < data.grid.ssize()
   next y++ {
      (copy x:= 0)
      while x < data.grid.ssize()
      next x++ {
         if ( data.get_element( x, y ) == 'A' ) {
            // Check X pattern for M/S combos
            if ( data.get_element( x - 1, y - 1 ) == 'M' && data.get_element( x + 1, y + 1 ) == 'S' ) ||
               ( data.get_element( x - 1, y - 1 ) == 'S' && data.get_element( x + 1, y + 1 ) == 'M' ) {
               if ( data.get_element( x + 1, y - 1 ) == 'M' && data.get_element( x - 1, y + 1 ) == 'S' ) ||
                  ( data.get_element( x + 1, y - 1 ) == 'S' && data.get_element( x - 1, y + 1 ) == 'M' ) {
                  count++;
               }
            }
         }
      }
   }

   std::cout << "Part Two: " << count << std::endl;
}

main: (args) = {
   if args.ssize() < 2 {
      std::cout << "Not enough arguments passed" << std::endl;
      exit(1);
   }

   fileName : std::string = args[1];
   fileStream := std::ifstream( fileName );
   parsed_data : ParsedData = fileStream;

   solve_part1( parsed_data );
   solve_part2( parsed_data );
}

