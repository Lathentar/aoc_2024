ParsedData: type = {
   // data members
   public grid: std::vector<std::vector<char>> = ();
   public g_x: i64 = 0;
   public g_y: i64 = 0;

   // parse from the stream
   operator=: (out this, move inputStream: std::istream) = {
      line := std::string();
      while ( std::getline( inputStream, line ) && !line.empty() ) {
         grid.push_back( std::vector<char>() );
         for line do (ch) {
            if ( ch == '^' ) {
               g_y = grid.ssize() - 1;
               g_x = grid.back().ssize();
            }

            grid.back().push_back(ch);
         }
      }
   }
}

get_element: ( grid: std::vector<std::vector<char>>, x: i64, y: i64 ) -> char = {
   if x < 0 || y < 0 || y >= grid.ssize() || x >= grid.front().ssize() {
      return ' ';
   }

   return grid[y][x];
}

sim_grid: ( grid: std::vector<std::vector<char>>, start_x: i64, start_y: i64, out visited : std::vector<std::vector<char>> ) -> bool = {
   visited = grid;
   for visited do (inout line) {
      for line do (inout ch) {
         ch = '.';
      }
   }

   g_x := start_x;
   g_y := start_y;
   dir := 0;

   while true {
      if visited[ g_y ][ g_x ] == '.' {
         visited[g_y][g_x] = char('0' + (1 << dir));
      }
      else {
         if ( visited[ g_y ][ g_x ] & (1 << dir) )
         {
            return false;
         }

         visited[g_y][g_x] |= (1 << dir);
      }

      delta_x := 0;
      delta_y := 0;
      if dir == 0 {
         delta_y = -1;
      }
      else if dir == 1 {
         delta_x = 1;
      }
      else if dir == 2 {
         delta_y = 1;
      }
      else if dir == 3 {
         delta_x = -1;
      }
      
      ch := get_element(grid, g_x + delta_x, g_y + delta_y);
      if ch == '#' {
         dir = (dir + 1) % 4; // Turn right
      }
      else if ch == ' ' {
         break;
      }
      else {
         g_x += delta_x;
         g_y += delta_y;
      }
   }

   return true;
}

solve_part1: (data: ParsedData) = {
   visited := data.grid;
   if ( sim_grid( data.grid, data.g_x, data.g_y, out visited ) ) {
      // Count the 'X'
      sum := 0;
      for visited do (line) {
         for line do (ch) {
            if ch != '.' {
               sum++;
            }
         }
      }
      std::cout << "Part One: " << sum << std::endl;
   }
}

solve_part2: (data: ParsedData) = {
   real_visited := data.grid;
   test_visited := data.grid;
   grid := data.grid;

   // Do a simulation to see everywhere the guard normally walks
   if ( sim_grid( grid, data.g_x, data.g_y, out real_visited ) )
   {
      // Replace each visited element with a # (except the starting point)
      looped := 0;
      y := 0;
      for real_visited next y++ do (line) {
         x := 0;
         for line next x++ do (ch) {
            if ( real_visited[y][x] != '.' && grid[y][x] == '.' ) {
               grid[y][x] = '#';
               if ( !sim_grid( grid, data.g_x, data.g_y, out test_visited ) ) {
                  looped++;
               }
               grid[y][x] = '.';
            }
         }
      }

      std::cout << "Part Two: " << looped << std::endl;
   }
}

main: (args) = {
   if args.ssize() < 2 {
      std::cout << "Not enough arguments passed" << std::endl;
      exit(1);
   }

   fileName : std::string = args[1];
   fileStream := std::ifstream( fileName );
   parsed_data : ParsedData = fileStream;

   solve_part1( parsed_data );
   solve_part2( parsed_data );
}

